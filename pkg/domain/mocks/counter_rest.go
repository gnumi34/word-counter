// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	response "github.com/gnumi34/word-counter/pkg/domain/response"
)

// CounterREST is an autogenerated mock type for the CounterREST type
type CounterREST struct {
	mock.Mock
}

// GetWordFromAPI provides a mock function with given fields: word
func (_m *CounterREST) GetWordFromAPI(word string) (response.EnglishDictionaryResponse, error) {
	ret := _m.Called(word)

	var r0 response.EnglishDictionaryResponse
	if rf, ok := ret.Get(0).(func(string) response.EnglishDictionaryResponse); ok {
		r0 = rf(word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.EnglishDictionaryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCounterREST interface {
	mock.TestingT
	Cleanup(func())
}

// NewCounterREST creates a new instance of CounterREST. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCounterREST(t mockConstructorTestingTNewCounterREST) *CounterREST {
	mock := &CounterREST{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
